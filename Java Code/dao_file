package hibernate_crud_operation.dao;

import java.util.List;

import hibernate_crud_operation.dto.Adhar;
import hibernate_crud_operation.dto.Person;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;

public class PersonAdharDao {
	EntityManager em = Persistence
					.createEntityManagerFactory("hibernate")
					.createEntityManager();
	EntityTransaction et = em.getTransaction();
	public Person savePersonAdharDao(Person person) {
		et.begin();
//		em.persist(adhar);
		em.persist(person);
		et.commit();
		return person;
	}
	public Adhar saveAdharDao(Adhar adhar) {
		et.begin();
		em.persist(adhar);
		et.commit();
		return adhar;
	}
	public Person savePersonDao(Person person, long adharNumber) {
		Adhar adhar = em.find(Adhar.class, adharNumber);
		if(adhar != null) {
			try {
				person.setAdhar(adhar);
				et.begin();
				em.persist(person);
				et.commit();
				return person;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
			}
		}
		else {
			return null;
		}
	}
	public Person getPersonByIdDao(int id) {
		Person person = em.find(Person.class, id);
		if(person != null) {
			return person;
		}
		else {
			return null;
		}
	}
	public List<Person> displayAllDataDao(){
		Query query = em.createQuery("from Person");
		List<Person> list = query.getResultList();
		return list;
	}
	public boolean deletePersonByIdDao(int id) {
		Person person = em.find(Person.class, id);
		if(person != null) {
			et.begin();
			em.remove(person);
			et.commit();
			return true;
		}
		return false;
	}
	public boolean deleteAdharByIdDao(long id) {
		Adhar adhar = em.find(Adhar.class, id);
		Query query = em.createNativeQuery("select * from person where adhar_adharNo = ?",Person.class);
		query.setParameter(1, id);
		Person person = (Person) query.getSingleResult();
		
		if(adhar != null) {
			et.begin();
			person.setAdhar(null);
			em.merge(person);
			em.remove(adhar);
			et.commit();
			return true;
		}
		return false;
	}
}
